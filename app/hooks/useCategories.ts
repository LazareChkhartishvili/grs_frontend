"use client";

import { useState, useEffect } from "react";
import { CategoryItem } from "../context/CategoryContext";
import { Category, Subcategory, Set } from "../types/category";

interface UseCategoriesReturn {
  categories: CategoryItem[];
  loading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
}

function getFallbackCategories(): CategoryItem[] {
  return [
    {
      id: 1,
      _id: "fallback_1",
      title: "–û—Ä—Ç–æ–ø–µ–¥–∏—è",
      backgroundImage: "/assets/images/blog.png",
      categoryImage: "/assets/images/services/category.png",
      items: [
        "–®–ï–ô–ù–´–ô –û–¢–î–ï–õ –ü–û–ó–í–û–ù–û–ß–ù–ò–ö–ê",
        "–ì–†–£–î–ù–û–ô –û–¢–î–ï–õ –ü–û–ó–í–û–ù–û–ß–ù–ò–ö–ê",
        "–ü–†–û–ë–õ–ï–ú–´ –í–ï–†–•–ù–ò–• –ö–û–ù–ï–ß–ù–û–°–¢–ï–ô",
        "–ü–†–û–ë–õ–ï–ú–´ –ù–ò–ñ–ù–ò–• –ö–û–ù–ï–ß–ù–û–°–¢–ï–ô",
      ],
      subcategories: [
        { id: 1, name: "–®–ï–ô–ù–´–ô –û–¢–î–ï–õ –ü–û–ó–í–û–ù–û–ß–ù–ò–ö–ê" },
        { id: 2, name: "–ì–†–£–î–ù–û–ô –û–¢–î–ï–õ –ü–û–ó–í–û–ù–û–ß–ù–ò–ö–ê" },
        { id: 3, name: "–ü–†–û–ë–õ–ï–ú–´ –í–ï–†–•–ù–ò–• –ö–û–ù–ï–ß–ù–û–°–¢–ï–ô" },
        { id: 4, name: "–ü–†–û–ë–õ–ï–ú–´ –ù–ò–ñ–ù–ò–• –ö–û–ù–ï–ß–ù–û–°–¢–ï–ô" },
      ],
    },
    {
      id: 2,
      _id: "fallback_2",
      title: "–¢–µ—Ä–∞–ø–∏—è",
      backgroundImage: "/assets/images/blog.png",
      categoryImage: "/assets/images/services/course2.png",
      items: [
        "–ö–ê–†–î–ò–û–õ–û–ì–ò–Ø",
        "–ù–ï–í–†–û–õ–û–ì–ò–Ø",
        "–≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø",
        "–ì–ê–°–¢–†–û–≠–ù–¢–ï–†–û–õ–û–ì–ò–Ø",
      ],
      subcategories: [
        { id: 5, name: "–ö–ê–†–î–ò–û–õ–û–ì–ò–Ø" },
        { id: 6, name: "–ù–ï–í–†–û–õ–û–ì–ò–Ø" },
        { id: 7, name: "–≠–ù–î–û–ö–†–ò–ù–û–õ–û–ì–ò–Ø" },
        { id: 8, name: "–ì–ê–°–¢–†–û–≠–ù–¢–ï–†–û–õ–û–ì–ò–Ø" },
      ],
    },
    {
      id: 3,
      _id: "fallback_3",
      title: "–•–∏—Ä—É—Ä–≥–∏—è",
      backgroundImage: "/assets/images/blog.png",
      categoryImage: "/assets/images/services/cousre1.png",
      items: [
        "–û–ë–©–ê–Ø –•–ò–†–£–†–ì–ò–Ø",
        "–ü–õ–ê–°–¢–ò–ß–ï–°–ö–ê–Ø –•–ò–†–£–†–ì–ò–Ø",
        "–ù–ï–ô–†–û–•–ò–†–£–†–ì–ò–Ø",
        "–ö–ê–†–î–ò–û–•–ò–†–£–†–ì–ò–Ø",
      ],
      subcategories: [
        { id: 9, name: "–û–ë–©–ê–Ø –•–ò–†–£–†–ì–ò–Ø" },
        { id: 10, name: "–ü–õ–ê–°–¢–ò–ß–ï–°–ö–ê–Ø –•–ò–†–£–†–ì–ò–Ø" },
        { id: 11, name: "–ù–ï–ô–†–û–•–ò–†–£–†–ì–ò–Ø" },
        { id: 12, name: "–ö–ê–†–î–ò–û–•–ò–†–£–†–ì–ò–Ø" },
      ],
    },
  ];
}

export function useCategories(): UseCategoriesReturn {
  const [categories, setCategories] = useState<CategoryItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchCategories = async () => {
    try {
      setLoading(true);
      setError(null);

      const { apiRequest, API_CONFIG } = await import("../config/api");
      const endpoint = API_CONFIG.ENDPOINTS.CATEGORIES;
      console.log("üì° API Endpoint:", `${API_CONFIG.BASE_URL}${endpoint}`);

      const backendCategories: Category[] = await apiRequest<Category[]>(endpoint);

      if (!Array.isArray(backendCategories)) {
        throw new Error("API response is not an array");
      }

      console.log("üì¶ Received categories:", backendCategories);

      const transformedCategories: CategoryItem[] = backendCategories
        .filter(category => category.isActive)
        .map((category, index) => ({
          id: index + 1,
          _id: category._id,
          title: category.name,
          backgroundImage: "/assets/images/blog.png", // ·Éì·É†·Éù·Éî·Éë·Éò·Éó·Éò
          categoryImage: "/assets/images/services/category.png", // ·Éì·É†·Éù·Éî·Éë·Éò·Éó·Éò
          items: category.subcategories?.map(sub => sub.name) || [],
          subcategories: category.subcategories
            ?.filter(sub => sub.isActive)
            ?.map(sub => ({
              id: parseInt(sub._id.slice(-8), 16),
              _id: sub._id,
              name: sub.name,
              nameGe: sub.nameGe,
              nameRu: sub.nameRu,
              image: sub.image,
              categoryId: sub.categoryId,
              sets: sub.sets || [],
            })) || [],
          sets: category.sets || [],
        }));

      console.log("‚ú® Transformed categories:", transformedCategories);
      setCategories(transformedCategories);
    } catch (err) {
      console.error("‚ùå Error fetching categories:", err);
      const fallbackCategories = getFallbackCategories();
      setCategories(fallbackCategories);
      setError(err instanceof Error ? err.message : "API Error - using fallback data");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  return {
    categories,
    loading,
    error,
    refetch: fetchCategories,
  };
}

// SWR Version - ·Éí·Éê·Éõ·Éù·Éò·Éß·Éî·Éú·Éî ·Éõ·ÉÆ·Éù·Éö·Éù·Éì ·Éó·É£ SWR ·Éì·Éê·Éò·Éú·É°·É¢·Éê·Éö·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éí·Éê·É•·Éï·É°
// npm install swr
/*
import useSWR from 'swr';

export function useCategoriesSWR() {
  const fetcher = async () => {
    const { apiRequest } = await import('../config/api');
    return apiRequest<BackendCategory[]>('/api/categories/complete-hierarchy');
  };

  const { data, error, isLoading, mutate } = useSWR(
    '/api/categories/complete-hierarchy',
    fetcher,
    {
      revalidateOnFocus: false,
      revalidateOnReconnect: true,
      refreshInterval: 0,
      errorRetryCount: 3
    }
  );

  return {
    categories: data || [],
    loading: isLoading,
    error: error?.message || null,
    refetch: mutate
  };
}
*/
